{"remainingRequest":"I:\\WebDev\\vuejs\\movie\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!I:\\WebDev\\vuejs\\movie\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!I:\\WebDev\\vuejs\\movie\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!I:\\WebDev\\vuejs\\movie\\src\\components\\pages\\Details.vue?vue&type=template&id=34a13377&","dependencies":[{"path":"I:\\WebDev\\vuejs\\movie\\src\\components\\pages\\Details.vue","mtime":1578926935839},{"path":"I:\\WebDev\\vuejs\\movie\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"I:\\WebDev\\vuejs\\movie\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"I:\\WebDev\\vuejs\\movie\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"I:\\WebDev\\vuejs\\movie\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}